# Form implementation generated from reading ui file 'music.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import *
from PyQt6.QtGui import *
from PyQt6.QtCore import Qt
from Client import Client
from gui import Ui_MusicPlayer
import pygame
import os
import mutagen

class Ui_Form(QWidget):
    def __init__(self, id, name, artist, img, link):
        super().__init__()
        self.id=id
        self.name=name
        self.artist=artist
        self.img=img
        self.link=link

          # Create the main form widget
        self.isPlaying = False
        self.songPosition = 0
        self.temp = 0
        self.setupUi()
    def setupUi(self):
        self.resize(585, 94)
        self.frame = QtWidgets.QFrame(self)
        self.frame.setGeometry(QtCore.QRect(10, 10, 571, 80))
        self.frame.setStyleSheet("background-color: rgb(160,190,228);")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")

        self.image = QtWidgets.QLabel(parent=self.frame)
        self.image.setGeometry(QtCore.QRect(20, 10, 61, 61))
        self.image.setText("")
        self.image.setObjectName("label")
        self.setImageToQLabel()

        self.namesong = QtWidgets.QLabel(parent=self.frame)
        self.namesong.setGeometry(QtCore.QRect(130, 20, 411, 20))
        self.namesong.setObjectName("label_2")

        self.nameartist = QtWidgets.QLabel(parent=self.frame)
        self.nameartist.setGeometry(QtCore.QRect(130, 40, 181, 20))
        self.nameartist.setObjectName("label_3")

        self.pushButton = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton.setGeometry(QtCore.QRect(420, 10, 61, 61))
        self.pushButton.setObjectName("pushButton")

        self.pushButton.clicked.connect(self.playSong)

        self.retranslateUi()


    def retranslateUi(self):
        self.namesong.setText((self.name))
        self.nameartist.setText((self.artist))
        self.icon7 = QtGui.QIcon()
        self.icon7.addPixmap(QtGui.QPixmap("img/pause-solid.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.icon4 = QtGui.QIcon()
        self.icon4.addPixmap(QtGui.QPixmap("img/play-solid.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.pushButton.setIcon(self.icon4)

    # def playSong(self):
    #         conn = Client()
    #         conn.connect()
    #         pygame.mixer.init()
            
    #         if not self.isPlaying:  # Nếu đang dừng, phát nhạc
    #             try:
    #                 conn.playSongFromServer(self.id)
    #                 self.isPlaying = True  # Cập nhật trạng thái thành "đang phát"
    #                 self.pushButton.setIcon(self.icon7)
                    
    #             except Exception as e:
    #                 QMessageBox.information(None, "Thông báo!", "Lỗi khi phát nhạc!")
    #         else:  # Nếu đang phát, dừng nhạc
    #             pygame.mixer.music.stop()

    #             self.isPlaying = False  # Cập nhật trạng thái thành "đã dừng"
    #             self.pushButton.setIcon(self.icon4)

    def getTime(self):
            pygame.mixer.init()

            conn = Client()
            conn.connect()
            filepath=conn.getSongByID(self.id)
            total_time = pygame.mixer.Sound(filepath).get_length()
            print("Total time of the MP3 file:", total_time, "seconds")
            pygame.mixer.quit()
            return total_time

    def playSong(self):
            pygame.mixer.init()
            
            conn = Client()
            conn.connect()
            try:
                self.filepath=conn.getSongByID(self.id)
                try:
                    pygame.mixer.music.load(self.filepath)  # Tải lại bài hát
                except pygame.error as err:
                    print(f"Lỗi khi tải file âm thanh: {err}")
                else:
                    print("Tải file âm thanh thành công!")
            except Exception as e:
                        QMessageBox.information(None, "Thông báo!", "Lỗi khi tải âm thanh!")

            if not self.isPlaying:  # Nếu đang dừng, phát nhạc
                if self.temp > 0:
                    
                    pygame.mixer.music.play(start=self.temp/1000)
                    print(self.temp,"temp")
                    
                    self.isPlaying = True  # Cập nhật trạng thái thành "đang phát"
                    self.pushButton.setIcon(self.icon7)
                    
                else:
                    
                    pygame.mixer.music.play()
                    
                    self.isPlaying = True  # Cập nhật trạng thái thành "đang phát"
                    self.pushButton.setIcon(self.icon7)

            else:  # Nếu đang phát, dừng nhạc
                self.songPosition = pygame.mixer.music.get_pos()    #lưu thời gian dừng mới
                print(self.songPosition,"pause")
                pygame.mixer.music.stop()
                #kiểm tra xem nó bằng thời lượng bài hát chưa
                if self.temp+self.songPosition < self.getTime()*1000:
                     self.temp+=self.songPosition
                else:
                     self.temp=0

                print(self.temp,"count")
                
                self.isPlaying = False  # Cập nhật trạng thái thành "đã dừng"
                self.pushButton.setIcon(self.icon4)




    

    def setImageToQLabel(self):
        conn = Client()
        conn.connect()
        # Đọc dữ liệu ảnh từ file tạm
        image_data = conn.getImageFromServer(self.id)
        # Đọc nội dung ảnh từ tệp tạm
        image_bytes = image_data.read()
        # Chuyển đổi dữ liệu ảnh sang QPixmap
        pixmap = QPixmap()
        pixmap.loadFromData(image_bytes)

        # Đặt pixmap vào QLabel
        self.image.setPixmap(pixmap)


        # Lấy kích thước QLabel
        label_width = self.image.width()
        label_height = self.image.height()

        # Lấy tỷ lệ khung hình của pixmap
        pixmap_ratio = pixmap.width() / pixmap.height()

        # Tính toán chiều rộng mới cho pixmap
        new_width = min(label_width, label_height * pixmap_ratio)

        # Tính toán chiều cao mới cho pixmap
        new_height = min(label_height, label_width / pixmap_ratio)

        # Tạo pixmap mới với kích thước đã tính toán
        scaled_pixmap = pixmap.scaled(new_width, new_height) # type: ignore
        # Thay đổi kích thước QLabel để phù hợp với ảnh
        self.image.setPixmap(scaled_pixmap)
if __name__ == "__main__":
    ui = Ui_Form()
